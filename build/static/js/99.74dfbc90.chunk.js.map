{"version":3,"file":"static/js/99.74dfbc90.chunk.js","mappings":"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","sources":["components/StreamVideoCoreV2.jsx"],"sourcesContent":["import {\r\n  CallingState,\r\n  CancelCallButton,\r\n  RecordCallButton,\r\n  SpeakerLayout,\r\n  StreamCall,\r\n  StreamTheme,\r\n  StreamVideo,\r\n  StreamVideoClient,\r\n  ToggleAudioPreviewButton,\r\n  ToggleVideoPreviewButton,\r\n  useCallStateHooks\r\n} from '@stream-io/video-react-sdk';\r\n\r\nimport '@stream-io/video-react-sdk/dist/css/styles.css';\r\nimport { useRef, useState } from 'react';\r\n\r\nimport html2canvas from \"html2canvas\";\r\n\r\nconst apiKey = 'mmhfdzb5evj2';\r\nconst token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJodHRwczovL3Byb250by5nZXRzdHJlYW0uaW8iLCJzdWIiOiJ1c2VyL0Jlbl9Ta3l3YWxrZXIiLCJ1c2VyX2lkIjoiQmVuX1NreXdhbGtlciIsInZhbGlkaXR5X2luX3NlY29uZHMiOjYwNDgwMCwiaWF0IjoxNzQ3ODY0ODY3LCJleHAiOjE3NDg0Njk2Njd9.EIcmcoGIrrb21i_M70DE5nvoc7IEMYqXh3gOSWidaHM';\r\nconst userId = 'Ben_Skywalker';\r\nconst callId = 'jGdKsruxWg4H';\r\nconsole.log(window.location.href);\r\n\r\nconst BACKEND_LINK = \"https://seismic-backend-04272025-bjbxatgnadguabg9.centralus-01.azurewebsites.net\"\r\n// const BACKEND_LINK = \"http://localhost:8080\";\r\n\r\nconst getFormattedDate = () => {\r\n  const now = new Date();\r\n  return `${String(now.getMonth() + 1).padStart(2, '0')}${String(\r\n    now.getDate()\r\n  ).padStart(2, '0')}-${String(now.getHours()).padStart(2, '0')}${String(\r\n    now.getMinutes()\r\n  ).padStart(2, '0')}`;\r\n};\r\nconst DATETIME = getFormattedDate();\r\n\r\nconst doctor = {\r\n  id: userId,\r\n  name: 'Doctor'\r\n};\r\n\r\nconst client = new StreamVideoClient({ apiKey, user: doctor, token });\r\nconst call = client.call('default', callId);\r\ncall.join({ create: true });\r\n\r\nexport default function StreamVideoCoreV2() {\r\n  return (\r\n    <StreamVideo client={client}>\r\n      <StreamCall call={call}>\r\n        <MyUILayout />\r\n      </StreamCall>\r\n    </StreamVideo>\r\n  );\r\n}\r\n\r\nexport const MyUILayout = () => {\r\n  const { useCallCallingState } = useCallStateHooks();\r\n  const callingState = useCallCallingState();\r\n\r\n  const divRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n  const [recording, setRecording] = useState(false);\r\n  const mediaRecorderRef = useRef(null);\r\n  const chunksRef = useRef([]);\r\n  const intervalRef = useRef(null);\r\n  const canvasDrawIntervalRef = useRef(null);\r\n  const streamRef = useRef(null);\r\n  const chunkIndex = useRef(0);\r\n\r\n  const startRecording = async () => {\r\n    if (!divRef.current || !canvasRef.current) return;\r\n    setRecording(true)\r\n\r\n    const { offsetWidth, offsetHeight } = divRef.current;\r\n    canvasRef.current.width = offsetWidth;\r\n    canvasRef.current.height = offsetHeight;\r\n\r\n    canvasDrawIntervalRef.current = setInterval(() => {\r\n      html2canvas(divRef.current).then((canvasImage) => {\r\n        const ctx = canvasRef.current.getContext('2d');\r\n        ctx.clearRect(0, 0, offsetWidth, offsetHeight);\r\n        ctx.drawImage(canvasImage, 0, 0, offsetWidth, offsetHeight);\r\n      });\r\n    }, 100);\r\n\r\n    const canvasStream = canvasRef.current.captureStream(60);\r\n    const audioStream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n\r\n    const combinedStream = new MediaStream([\r\n      ...canvasStream.getVideoTracks(),\r\n      ...audioStream.getAudioTracks(),\r\n    ]);\r\n    streamRef.current = combinedStream;\r\n\r\n    startMediaRecorder(combinedStream);\r\n\r\n    intervalRef.current = setInterval(() => {\r\n      if (mediaRecorderRef.current?.state === 'recording') {\r\n        mediaRecorderRef.current.stop();\r\n        startMediaRecorder(combinedStream);\r\n      }\r\n    }, 5000);\r\n\r\n    setRecording(true);\r\n  };\r\n\r\n  const startMediaRecorder = (stream) => {\r\n    const recorder = new MediaRecorder(stream, { mimeType: 'video/webm' });\r\n    chunksRef.current = [];\r\n\r\n    recorder.ondataavailable = async (e) => {\r\n      if (e.data.size > 0) {\r\n        const blob = new Blob([e.data], { type: 'video/webm' });\r\n        const formData = new FormData();\r\n        const index = chunkIndex.current++;\r\n        formData.append('chunk', blob, `recording-${index}.webm`);\r\n\r\n        try {\r\n          await fetch(`${BACKEND_LINK}/upload-chunk/Guest-${DATETIME}/${index}`, {\r\n            method: 'POST',\r\n            body: formData,\r\n          });\r\n        } catch (err) {\r\n          console.error('Upload error:', err);\r\n        }\r\n      }\r\n    };\r\n\r\n    recorder.start();\r\n    mediaRecorderRef.current = recorder;\r\n  };\r\n\r\n  const stopRecording = () => {\r\n    clearInterval(intervalRef.current);\r\n    clearInterval(canvasDrawIntervalRef.current);\r\n    if (mediaRecorderRef.current?.state === 'recording') {\r\n      mediaRecorderRef.current.stop();\r\n    }\r\n    streamRef.current?.getTracks().forEach((track) => track.stop());\r\n    setRecording(false);\r\n  };\r\n\r\n  const handleRecordingClick = async () => {\r\n    console.log(\"Recording Button clicked\");\r\n    if (!recording) {\r\n      await startRecording();\r\n    }\r\n    else {\r\n      stopRecording()\r\n    }\r\n\r\n  }\r\n\r\n  if (callingState !== CallingState.JOINED) {\r\n    console.log(\"Joining\");\r\n\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  return (\r\n    <StreamTheme>\r\n      <canvas ref={canvasRef} style={{ display: 'none' }} />\r\n      <div ref={divRef}>\r\n        <SpeakerLayout participantsBarPosition='bottom' />\r\n        {/* {localParticipant && <ParticipantView participant={localParticipant} />} */}\r\n      </div>\r\n      <div style={{ display: 'flex', gap: '10px', justifyContent: 'center', marginTop: '10px' }}>\r\n        <ToggleAudioPreviewButton />\r\n        <ToggleVideoPreviewButton />\r\n        <div onClick={handleRecordingClick}>\r\n          <RecordCallButton />\r\n        </div>\r\n        <CancelCallButton />\r\n      </div>\r\n    </StreamTheme>\r\n  );\r\n};"],"names":["console","log","window","location","href","DATETIME","getFormattedDate","now","Date","String","getMonth","padStart","getDate","getHours","getMinutes","doctor","id","name","client","StreamVideoClient","apiKey","user","token","call","StreamVideoCoreV2","_jsx","StreamVideo","children","StreamCall","MyUILayout","join","create","useCallCallingState","useCallStateHooks","callingState","divRef","useRef","canvasRef","recording","setRecording","useState","mediaRecorderRef","chunksRef","intervalRef","canvasDrawIntervalRef","streamRef","chunkIndex","startMediaRecorder","stream","recorder","MediaRecorder","mimeType","current","ondataavailable","async","e","data","size","blob","Blob","type","formData","FormData","index","append","fetch","method","body","err","error","start","CallingState","JOINED","_jsxs","StreamTheme","ref","style","display","SpeakerLayout","participantsBarPosition","gap","justifyContent","marginTop","ToggleAudioPreviewButton","ToggleVideoPreviewButton","onClick","stopRecording","_mediaRecorderRef$cur2","_streamRef$current","clearInterval","state","stop","getTracks","forEach","track","offsetWidth","offsetHeight","width","height","setInterval","html2canvas","then","canvasImage","ctx","getContext","clearRect","drawImage","canvasStream","captureStream","audioStream","navigator","mediaDevices","getUserMedia","audio","combinedStream","MediaStream","getVideoTracks","getAudioTracks","_mediaRecorderRef$cur","startRecording","RecordCallButton","CancelCallButton"],"sourceRoot":""}